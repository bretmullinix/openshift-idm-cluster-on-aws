---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  tasks:

    - name: Include the variables needed for creation
      include_vars:
        file: "vars/main.yml"

    # TODO: Developer must implement and populate 'server' variable
    # Terminate every running instance in a region. Use with EXTREME caution.
#    - name: create a new ec2 key pair, returns generated private key
#      ec2_key:
#        name: "{{ aws_idm_key_pair }}"
#        state: absent

    - name: create a new ec2 key pair, returns generated private key
      ec2_key:
        name: "{{ aws_idm_key_pair }}"
        state: present
      register: key_pair_details

    - name: Set Key Pair Facts
      set_fact:
        aws_keypair: "{{ key_pair_details['key'] }}"

    - name: Show Key Pair Information
      debug:
        msg: "Here is your key pair:  {{ aws_keypair }}"

    - name: Copy the private key to a file so we can ssh into it
      copy:
        content: "{{ aws_keypair['private_key'] }}"
        dest: "{{ aws_idm_private_key }}"
      vars:
        ansible_python_interpreter:  /vms/harddrive/home_directory/bmullini/Documents/redhat_tools/python/virtual_environments/IntelliJ/bin/python3.7
      when: create_private_key == true

    - name: create a VPC with dedicated tenancy and a couple of tags
      ec2_vpc_net:
        name: vpc_openshift_idm
        cidr_block: 10.10.0.0/16
        dns_support: yes
        dns_hostnames: yes
        tags:
          module: "Openshift Cluster VPC"
        tenancy: default
      register: ec2_vpc_net

    - name: Set the VPC Fact
      set_fact:
        vpc: "{{ ec2_vpc_net.vpc }}"


    - name: debug vpc object
      debug:
        msg: "{{ vpc }}"

    - name: create ec2 vpc subnet
    # create the subnet for the vpc with a cidr block
      ec2_vpc_subnet:
        vpc_id: "{{ vpc.id }}"
        state: present
        cidr: "10.10.0.0/24"
        # enable public ip
        map_public: yes
        resource_tags:
          Name: "openshift_subnet"
      register: subnet_result

    - name: create ec2 vpc internet gateway
      # create an internet gateway for the vpc
      ec2_vpc_igw:
        vpc_id: "{{ vpc.id }}"
        state: present
        tags:
          Name: "openshift_cluster_idm_gateway"
      register: igw

    - name: Set the VPC Subnet Fact
      set_fact:
        vpc_subnet: "{{ subnet_result['subnet'] }}"

    - name: Debug Subnet
      debug:
        msg: "Here is your subnet:  {{ vpc_subnet.id }}"

    # create routing to/from internet
    - name: Route IGW
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.id }}"
        subnets:
          - "{{ vpc_subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id  }}"
        tags:
          Name: "openshift_cluster_route"

    - name: openshift cluster with idm ec2 group
      ec2_group:
        name: openshift_idm_security_group
        description: The security group for the Openshift Cluster with IDM
        vpc_id: "{{ vpc.id }}"
        rules:
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
              - 22
            cidr_ip: 0.0.0.0/0
        tags:
          Name: "openshift_security_group"
      register: security_group



  # start an instance with a public IP address
    - name: Create IDM EC2 Instance
      ec2_instance:
        name: "{{ aws_idm_instance_name }}"
        wait: yes
        key_name: "{{ aws_idm_key_pair }}"
        vpc_subnet_id: "{{ vpc_subnet.id }}"
        instance_type:  t2.medium
        security_group: "{{ security_group.group_id }}"
        network:
          assign_public_ip: true
        image_id: ami-00594b9c138e6303d
      register: ec2_facts

    - name: Print EC2 facts
      debug:
        var: ec2_facts

    - name: Set public ip address for ec2 instance
      set_fact:
        aws_idm_public_ip: "{{ ec2_facts.instances[0].network_interfaces[0].association.public_ip }}"

    - name: Print the public ip address
      debug:
        var: aws_idm_public_ip

    - name: fail it on purpose
      fail:
        msg: "failed it on purpose"

    - when: server.changed | default(false) | bool
      block:
        - name: Populate instance config dict
          set_fact:
            instance_conf_dict: {
              'instance': "{{ }}",
              'address': "{{ }}",
              'user': "centos",
              'port': "22",
              'identity_file': "{{ aws_idm_private_key }}", }
          with_items: "{{ server.results }}"
          register: instance_config_dict

        - name: Convert instance config dict to a list
          set_fact:
            instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

        - name: Dump instance config
          copy:
            content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
            dest: "{{ molecule_instance_config }}"
