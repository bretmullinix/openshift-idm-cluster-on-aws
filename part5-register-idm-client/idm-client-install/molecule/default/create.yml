---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: true
  tasks:

    - name: Include the variables needed for creation
      include_vars:
        file: "vars/main.yml"

    - name: Set molecule directory
      set_fact:
        molecule_ephemeral_directory:
          '{{ lookup(''env'', ''MOLECULE_EPHEMERAL_DIRECTORY'') }}'

    - name: AWS Private Key file location
      set_fact:
        aws_private_key_file: "../../files/private_keys/{{ ec2_instances[0].key_pair }}"

    - name: Set the molecule directory private key
      set_fact:
        aws_molecule_private_key_file:
          "{{ molecule_ephemeral_directory }}/private_key"

    - name: Copy the private key to the molecule config directory
      copy:
        src: "{{ aws_private_key_file }}"
        dest: "{{ aws_molecule_private_key_file }}"
        mode: 0600

    - name: Get VPC Facts
      ec2_vpc_net_info:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ aws_vpc_name }}"
      register: vpc_info

    - name: Fail if the VPC does not exist
      fail:
        msg:  "The VPC called '{{ aws_vpc_name }}' does not exist."
      when:
        - vpc_info.vpcs is not defined or vpc_info.vpcs | length  == 0

    - name: Gather facts on the AWS Control subnet
      ec2_vpc_subnet_info:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ aws_subnet_name }}"
      register: vpc_control_subnet_info

    - name: Fail if we do not get a subnet for the EC2 instance
      fail:
        msg: "We could not obtain the {{ aws_subnet_name }} subnet"
      when:
        - vpc_control_subnet_info is undefined or
          vpc_control_subnet_info.subnets is undefined or
          vpc_control_subnet_info.subnets | length == 0

    # Single instance with ssd gp2 root volume
    - name: Create EC2 Instance
      ec2:
        key_name: "{{ ec2_instances[0].key_pair }}"
        group: "{{ aws_security_group }}"
        instance_type: t2.medium
        image: "{{ ec2_instances[0].aws_ami }}"
        wait: true
        wait_timeout: 500
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: "{{ ec2_instances[0].root_volume_size }}"
            delete_on_termination: true
        vpc_subnet_id: "{{ vpc_control_subnet_info.subnets[0].id }}"
        assign_public_ip: true
        count_tag:
          Name: "{{ ec2_instances[0].name }}"
        instance_tags:
          Name: "{{ ec2_instances[0].name }}"
        exact_count: 1
      register: ec2_facts


    - name: Set public ip address for ec2 instance
      set_fact:
        aws_public_ip: "{{ ec2_facts.tagged_instances[0].public_ip }}"

    - name: Populate instance config dict
      set_fact:
        instance_conf_dict: {
          'instance': "{{ item.name }}",
          'address': "{{ aws_public_ip }}",
          'user': "{{ item.user }}",
          'port': "{{ item.port }}",
          'identity_file': "{{ aws_molecule_private_key_file }}",
          'become_method': "sudo",
          'become_ask_pass': false,

        }
      with_items: "{{ ec2_instances }}"
      register: instance_config_dict

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf:
          "{{ instance_config_dict.results
          | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: Dump instance config
      copy:
        content: "{{ instance_conf
          | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"


    - name: Wait for SSH
      wait_for:
        port: 22
        host: "{{ aws_public_ip }}"
        search_regex: SSH
        delay: 10
        timeout: 320

    - name: Wait for boot process to finish
      pause:
        minutes: 2