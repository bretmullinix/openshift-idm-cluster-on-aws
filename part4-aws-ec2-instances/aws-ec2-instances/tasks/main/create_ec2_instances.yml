# Single instance with ssd gp2 root volume
- name: Create EC2 Instance
  ec2:
    key_name: "{{ item.key_name }}"
    group: "{{ aws_vpc.security_group }}"
    instance_type: "{{ item.instance_type }}"
    image: "{{ item.ami }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    region: "{{ aws_region }}"
    wait: true
    wait_timeout: 500
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ item.root_volume_size }}"
        delete_on_termination: true
    vpc_subnet_id: "{{ vpc_control_subnet.id }}"
    assign_public_ip: true
    count_tag:
      Name: "{{ item.name }}"
    instance_tags:
      Name: "{{ item.name }}"
    exact_count: 1
  with_items: "{{ ec2_instances }}"
  when: item.action == "create"
  register: ec2_facts

- name: Recursively remove ec2 facts directory
  file:
    path: "{{ role_path }}/files/ec2_facts"
    state: absent

- name: Create a folder to hold the ec2 facts
  file:
    path: "{{ role_path }}/files/ec2_facts"
    state: directory
    mode: '0755'
  delegate_to: localhost

- name: Initialize EC2 list of dictionaries
  set_fact:
    ec2_results: []


- name: Populate the EC2 list of dictionaries
  set_fact:
    ec2_results: "{{ ec2_results +
                 ['name:  ' + item.tagged_instances[0].tags.Name  ]
                 + [ 'public_ip:  ' + item.tagged_instances[0].public_ip  ]
                 + [ 'private_ip:  ' + item.tagged_instances[0].private_ip  ]
                 + [ 'key_pair:  ' + item.tagged_instances[0].key_name ]
                 + [ 'ssh connection: ssh -i ' + role_path  + '/files/private_keys/'
                 + item.tagged_instances[0].key_name
                 + ' centos@' + item.tagged_instances[0].public_ip ]
                 + ['\n']
                 }}"
  with_items: "{{ ec2_facts.results }}"
  when:
    - ec2_facts.results is defined and ec2_facts.results | length > 0
    - item.tagged_instances is defined and item.tagged_instances | length > 0

- name: Output the EC2 Facts
  copy:
    content: "{{ ec2_facts }}"
    dest: "{{ role_path}}/files/ec2_facts/{{ lookup('pipe','date +%m-%d-%Y-%H-%M-%S') }}_facts"
  delegate_to: localhost

- name: Output the EC2 Inventory Information
  copy:
    content: "{{ ec2_results | join('\n') }}"
    dest: "{{ role_path}}/files/ec2_facts/{{ lookup('pipe','date +%m-%d-%Y-%H-%M-%S') }}_inventory"
  delegate_to: localhost
  when: ec2_results and ec2_results | length > 0